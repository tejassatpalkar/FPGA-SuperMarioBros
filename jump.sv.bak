//Two-always example for state machine
//Moore Machine

module jump (input logic Clk, Reset, current_jumping, 
                 input logic Ball_Y_Pos,
                 output logic jump_clk,
             output int Y_Velocity );
     
     enum logic [3:0] {GROUND, JUMP1, JUMP2, JUMP3, JUMP4, JUMP5, JUMP6, JUMP7, JUMP8, JUMP9, JUMP10} curr_state, next_state; // States

    always_ff @ (posedge Clk) // frame_clk
    begin
        if (Reset)
            curr_state <= GROUND;
        else 
            curr_state <= next_state;
    end
     
    
//    logic [3:0] acceleration;
//    assign acceleration = 25;
    
    always_comb
    begin
        
        next_state  = curr_state;    
        unique case (curr_state) 

            GROUND : if (current_jumping)                // In our reset state, if we see a run we should start adding
                        next_state = JUMP1;
                                
            JUMP1:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else 
                        next_state = JUMP2;
                end
                
                JUMP2:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else 
                        next_state = JUMP3;
                end
                
                JUMP3:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else 
                        next_state = JUMP4;
                end
                
                JUMP4:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else 
                        next_state = JUMP5;
                end
                
                JUMP5:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP6;
                end
                
                JUMP6:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP7;
                end
                
                JUMP7:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP8;
                end
                
                JUMP8:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP9;
                end
                
                JUMP9:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP10;
                end
                
                JUMP10:
                begin
                    if (~current_jumping)                
                        next_state = GROUND;
                    else
                        next_state = JUMP10;
                end
           

        endcase

        case (curr_state) 
          
               GROUND: 
            begin
                     Y_Velocity = 0;
            end
                
                JUMP1: 
            begin
                    
                    Y_Velocity = -9;
                    
//                    if ((Ball_Y_Pos + Y_Velocity + 16) >= 447)
//                    begin
//                    
//                        Y_Velocity = 447 - 16 - Ball_Y_Pos;
//                    
//                    end
                    
            end
                
                JUMP2: 
            begin
                    
                    Y_Velocity = -8;
                    
            end
                
                JUMP3: 
            begin
                    
                    Y_Velocity = -7;
                    
            end
                
                JUMP4: 
            begin
                    
                    Y_Velocity = -6;
                    
            end
                
                JUMP5: 
            begin
                    
                    Y_Velocity = -5;
                    
            end
                
                JUMP6: 
            begin
                    
                    Y_Velocity = -3;
                    
            end
                
                JUMP7: 
            begin
                    
                    Y_Velocity = -1;
                    
            end
                
                JUMP8: 
            begin
                    
                    Y_Velocity = 1;
                    
            end
                
                JUMP9: 
            begin
                    
                    Y_Velocity = 3;
                    
                    if ((Ball_Y_Pos + Y_Velocity + 16) >= 447)
                        Y_Velocity = 447 - 16 - Ball_Y_Pos;
                    
            end
                
                JUMP10: 
            begin
                    
                    Y_Velocity = 5;
                    
                    if ((Ball_Y_Pos + Y_Velocity + 16) >= 447)
                        Y_Velocity = 447 - 16 - Ball_Y_Pos;
                    
            end
                
        endcase
    end
endmodule